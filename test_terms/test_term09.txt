let zipWith f xs ys =
      case xs of
        Nil -> []
        Cons x xs' ->
          case ys of
            Nil -> []
            Cons y ys' -> f x y `Cons` zipWith f xs' ys'
    ix l i = case l of
      Cons x xs -> if i == 0 then x else ix xs (i - 1)
in Left (ix (zipWith (\x y -> x + y) [1, 2] [3, 4]) 1)
